from datetime import datetime

from aiogram import Dispatcher, F, types
from aiogram.filters import CommandStart

from config import API_HOST
from handlers.api import BotAPI
from handlers.utils import get_next_smoking_time, localize_time

dp = Dispatcher()
api = BotAPI(API_HOST)

START_MESSAGE = (
    '–ü—Ä–∏–≤–µ—Ç, {}! üëãüèª\n\n'
    '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å.\n'
    '–ü–∏—à–∏ –º–Ω–µ –æ –∫–∞–∂–¥–æ–π –≤—ã–∫—É—Ä–µ–Ω–Ω–æ–π —Å–∏–≥–∞—Ä–µ—Ç–µ üö¨, –∞ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –≤—Ä–µ–º—è üïò, '
    '–∫–æ–≥–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–∫—É—Ä–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑. '
    '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–∏–≥–∞—Ä–µ—Ç–∞–º–∏, '
    '—Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –±—Ä–æ—Å–∏—Ç—å –ø–∞–≥—É–±–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É üòé\n\n'
    'P.S. –ò–º–µ–π –≤ –≤–∏–¥—É, —è –ø–æ–∫–∞–∑—ã–≤–∞—é <b>–º–æ—Å–∫–æ–≤—Å–∫–æ–µ</b> –≤—Ä–µ–º—è.'
)
SMOKED_CIGARETTE = 'üö¨ –°–∏–≥–∞—Ä–µ—Ç–∞'
WHEN_SMOKE = 'üïò –ö–æ–≥–¥–∞ –∫—É—Ä–∏—Ç—å?'
LACK_OF_DATA = (
    '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. '
    '–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π –≤—Ä–µ–º—è —Ö–æ—Ç—è –±—ã –¥–≤—É—Ö –≤—ã–∫—É—Ä–µ–Ω–Ω—ã—Ö —Å–∏–≥–∞—Ä–µ—Ç üö¨ .'
)
RECOMMENDED_TIME = (
    '–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–≥–∞—Ä–µ—Ç–∞ –≤—ã–∫—É—Ä–µ–Ω–∞ –≤ {last_time}.\n\n'
    '–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è <i>–Ω–µ –∫—É—Ä–∏—Ç—å</i> –¥–æ <b>{next_time}</b>.'
)


@dp.message(CommandStart())
async def start_handler(message: types.Message) -> None:
    kb = [
        [
            types.KeyboardButton(text=SMOKED_CIGARETTE),
            types.KeyboardButton(text=WHEN_SMOKE)
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )
    await message.answer(
        START_MESSAGE.format(message.from_user.first_name),
        reply_markup=keyboard
    )


@dp.message(F.text == SMOKED_CIGARETTE)
async def fix_smoking_time(message: types.Message):
    smoking_time = message.date.isoformat()
    api.add_user_cigarette(message.from_user.id, smoking_time)
    await message.reply('–û–∫')


@dp.message(F.text == WHEN_SMOKE)
async def show_recommended_time(message: types.Message):
    cigars = api.get_last_cigarettes(message.from_user.id)
    if len(cigars) < 2:
        await message.reply(LACK_OF_DATA)
    else:
        last_time = datetime.fromisoformat(cigars[0]['smoking_time'])
        penultimate_time = datetime.fromisoformat(cigars[1]['smoking_time'])
        await message.reply(
            RECOMMENDED_TIME.format(
                last_time=localize_time(last_time),
                next_time=get_next_smoking_time(last_time, penultimate_time)
            )
        )
